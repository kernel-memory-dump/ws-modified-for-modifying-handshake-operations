0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: 'D:\\BBT\\HBBTV\\SVN\\RT-Harness\\branch\\polling_branch\\node_modules\\ws',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package.tgz not in flight; packing
10 verbose tar pack [ 'C:\\Users\\snovak\\AppData\\Roaming\\npm-cache\\ws\\1.1.1\\package.tgz',
10 verbose tar pack   'D:\\BBT\\HBBTV\\SVN\\RT-Harness\\branch\\polling_branch\\node_modules\\ws' ]
11 verbose tarball C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package.tgz
12 verbose folder D:\BBT\HBBTV\SVN\RT-Harness\branch\polling_branch\node_modules\ws
13 info prepublish ws@1.1.1
14 verbose addLocalTarball adding from inside cache C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package.tgz
15 silly cache afterAdd ws@1.1.1
16 verbose afterAdd C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package\package.json not in flight; writing
17 verbose afterAdd C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package\package.json written
18 silly publish { author:
18 silly publish    { name: 'Einar Otto Stangvik',
18 silly publish      email: 'einaros@gmail.com',
18 silly publish      url: 'http://2x.io' },
18 silly publish   name: 'ws',
18 silly publish   description: 'simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js, up-to-date against RFC-6455',
18 silly publish   version: '1.1.1',
18 silly publish   license: 'MIT',
18 silly publish   main: 'index.js',
18 silly publish   keywords:
18 silly publish    [ 'Hixie',
18 silly publish      'HyBi',
18 silly publish      'Push',
18 silly publish      'RFC-6455',
18 silly publish      'WebSocket',
18 silly publish      'WebSockets',
18 silly publish      'real-time' ],
18 silly publish   repository: { type: 'git', url: 'git://github.com/websockets/ws.git' },
18 silly publish   scripts: { test: 'make test' },
18 silly publish   dependencies: { options: '>=0.0.5', ultron: '1.0.x' },
18 silly publish   devDependencies:
18 silly publish    { ansi: '0.3.x',
18 silly publish      benchmark: '0.3.x',
18 silly publish      bufferutil: '1.2.x',
18 silly publish      'expect.js': '0.3.x',
18 silly publish      istanbul: '^0.4.1',
18 silly publish      mocha: '2.3.x',
18 silly publish      should: '8.0.x',
18 silly publish      tinycolor: '0.0.x',
18 silly publish      'utf-8-validate': '1.2.x' },
18 silly publish   gypfile: true,
18 silly publish   gitHead: 'c7bb7306cb0e1d17df141f61a220056eaa5e3502',
18 silly publish   bugs: { url: 'https://github.com/websockets/ws/issues' },
18 silly publish   homepage: 'https://github.com/websockets/ws#readme',
18 silly publish   _id: 'ws@1.1.1',
18 silly publish   _shasum: '4e53a4c9daf1311747bc59ee6984dd79748b45bb',
18 silly publish   _from: '.',
18 silly publish   _npmVersion: '3.8.0',
18 silly publish   _nodeVersion: '4.3.1',
18 silly publish   _npmUser: { name: '3rdeden', email: 'npm@3rd-Eden.com' },
18 silly publish   maintainers:
18 silly publish    [ { name: 'einaros', email: 'einaros@gmail.com' },
18 silly publish      { name: 'v1', email: 'info@3rd-Eden.com' },
18 silly publish      { name: '3rdeden', email: 'npm@3rd-Eden.com' } ],
18 silly publish   dist:
18 silly publish    { shasum: '082ddb6c641e85d4bb451f03d52f06eabdb1f018',
18 silly publish      tarball: 'https://registry.npmjs.org/ws/-/ws-1.1.1.tgz' },
18 silly publish   _npmOperationalInternal:
18 silly publish    { host: 'packages-16-east.internal.npmjs.com',
18 silly publish      tmp: 'tmp/ws-1.1.1.tgz_1466770957650_0.7956828831229359' },
18 silly publish   directories: {},
18 silly publish   _resolved: 'https://registry.npmjs.org/ws/-/ws-1.1.1.tgz',
18 silly publish   readme: '# ws: a node.js websocket library\n\n[![Build Status](https://travis-ci.org/websockets/ws.svg?branch=master)](https://travis-ci.org/websockets/ws)\n\n`ws` is a simple to use WebSocket implementation, up-to-date against RFC-6455,\nand [probably the fastest WebSocket library for node.js][archive].\n\nPasses the quite extensive Autobahn test suite. See http://websockets.github.com/ws\nfor the full reports.\n\n## Protocol support\n\n* **Hixie draft 76** (Old and deprecated, but still in use by Safari and Opera.\n  Added to ws version 0.4.2, but server only. Can be disabled by setting the\n  `disableHixie` option to true.)\n* **HyBi drafts 07-12** (Use the option `protocolVersion: 8`)\n* **HyBi drafts 13-17** (Current default, alternatively option `protocolVersion: 13`)\n\n### Installing\n\n```\nnpm install --save ws\n```\n\n### Opt-in for performance\n\nThere are 2 optional modules that can be installed along side with the `ws`\nmodule. These modules are binary addons which improve certain operations, but as\nthey are binary addons they require compilation which can fail if no c++\ncompiler is installed on the host system.\n\n- `npm install --save bufferutil`: Improves internal buffer operations which\n  allows for faster processing of masked WebSocket frames and general buffer\n  operations.\n- `npm install --save utf-8-validate`: The specification requires validation of\n  invalid UTF-8 chars, some of these validations could not be done in JavaScript\n  hence the need for a binary addon. In most cases you will already be\n  validating the input that you receive for security purposes leading to double\n  validation. But if you want to be 100% spec-conforming and have fast\n  validation of UTF-8 then this module is a must.\n\n### Sending and receiving text data\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://www.host.com/path\');\n\nws.on(\'open\', function open() {\n  ws.send(\'something\');\n});\n\nws.on(\'message\', function(data, flags) {\n  // flags.binary will be set if a binary data is received.\n  // flags.masked will be set if the data was masked.\n});\n```\n\n### Sending binary data\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://www.host.com/path\');\n\nws.on(\'open\', function open() {\n  var array = new Float32Array(5);\n\n  for (var i = 0; i < array.length; ++i) {\n    array[i] = i / 2;\n  }\n\n  ws.send(array, { binary: true, mask: true });\n});\n```\n\nSetting `mask`, as done for the send options above, will cause the data to be\nmasked according to the WebSocket protocol. The same option applies for text\ndata.\n\n### Server example\n\n```js\nvar WebSocketServer = require(\'ws\').Server\n  , wss = new WebSocketServer({ port: 8080 });\n\nwss.on(\'connection\', function connection(ws) {\n  ws.on(\'message\', function incoming(message) {\n    console.log(\'received: %s\', message);\n  });\n\n  ws.send(\'something\');\n});\n```\n\n### ExpressJS example\n\n```js\nvar server = require(\'http\').createServer()\n  , url = require(\'url\')\n  , WebSocketServer = require(\'ws\').Server\n  , wss = new WebSocketServer({ server: server })\n  , express = require(\'express\')\n  , app = express()\n  , port = 4080;\n\napp.use(function (req, res) {\n  res.send({ msg: "hello" });\n});\n\nwss.on(\'connection\', function connection(ws) {\n  var location = url.parse(ws.upgradeReq.url, true);\n  // you might use location.query.access_token to authenticate or share sessions\n  // or ws.upgradeReq.headers.cookie (see http://stackoverflow.com/a/16395220/151312)\n\n  ws.on(\'message\', function incoming(message) {\n    console.log(\'received: %s\', message);\n  });\n\n  ws.send(\'something\');\n});\n\nserver.on(\'request\', app);\nserver.listen(port, function () { console.log(\'Listening on \' + server.address().port) });\n```\n\n### Server sending broadcast data\n\n```js\nvar WebSocketServer = require(\'ws\').Server\n  , wss = new WebSocketServer({ port: 8080 });\n\nwss.broadcast = function broadcast(data) {\n  wss.clients.forEach(function each(client) {\n    client.send(data);\n  });\n};\n```\n\n### Error handling best practices\n\n```js\n// If the WebSocket is closed before the following send is attempted\nws.send(\'something\');\n\n// Errors (both immediate and async write errors) can be detected in an optional\n// callback. The callback is also the only way of being notified that data has\n// actually been sent.\nws.send(\'something\', function ack(error) {\n  // if error is not defined, the send has been completed,\n  // otherwise the error object will indicate what failed.\n});\n\n// Immediate errors can also be handled with try/catch-blocks, but **note** that\n// since sends are inherently asynchronous, socket write failures will *not* be\n// captured when this technique is used.\ntry { ws.send(\'something\'); }\ncatch (e) { /* handle error */ }\n```\n\n### echo.websocket.org demo\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://echo.websocket.org/\', {\n  protocolVersion: 8,\n  origin: \'http://websocket.org\'\n});\n\nws.on(\'open\', function open() {\n  console.log(\'connected\');\n  ws.send(Date.now().toString(), {mask: true});\n});\n\nws.on(\'close\', function close() {\n  console.log(\'disconnected\');\n});\n\nws.on(\'message\', function message(data, flags) {\n  console.log(\'Roundtrip time: \' + (Date.now() - parseInt(data)) + \'ms\', flags);\n\n  setTimeout(function timeout() {\n    ws.send(Date.now().toString(), {mask: true});\n  }, 500);\n});\n```\n\n### Other examples\n\nFor a full example with a browser client communicating with a ws server, see the\nexamples folder.\n\nNote that the usage together with Express 3.0 is quite different from Express\n2.x. The difference is expressed in the two different serverstats-examples.\n\nOtherwise, see the test cases.\n\n### Running the tests\n\n```\nmake test\n```\n\n## API Docs\n\nSee [`/doc/ws.md`](https://github.com/websockets/ws/blob/master/doc/ws.md) for Node.js-like docs for the ws classes.\n\n## Changelog\n\nWe\'re using the GitHub [`releases`](https://github.com/websockets/ws/releases) for changelog entries.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Einar Otto Stangvik &lt;einaros@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[archive]: http://web.archive.org/web/20130314230536/http://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejs\n',
18 silly publish   readmeFilename: 'README.md' }
19 silly mapToRegistry name ws
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/ws
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading C:\Users\snovak\AppData\Roaming\npm-cache\ws\1.1.1\package.tgz
25 verbose request uri https://registry.npmjs.org/ws
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 11:09:46 AM
28 verbose request using bearer token for auth
29 verbose request id 0032cd71959f098f
30 http request PUT https://registry.npmjs.org/ws
31 http 403 https://registry.npmjs.org/ws
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Mon, 05 Sep 2016 09:09:47 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-fra1246-FRA',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1473066586.996236,VS0,VE848',
32 verbose headers   vary: 'Accept-Encoding' }
33 verbose request invalidating C:\Users\snovak\AppData\Roaming\npm-cache\registry.npmjs.org\ws on PUT
34 error publish Failed PUT 403
35 verbose stack Error: you do not have permission to publish "ws". Are you logged in as the correct user? : ws
35 verbose stack     at CachingRegistryClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:254:14)
35 verbose stack     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:178:14)
35 verbose stack     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:344:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1239:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1187:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid ws
38 verbose cwd D:\BBT\HBBTV\SVN\RT-Harness\branch\polling_branch\node_modules\ws
39 error Windows_NT 6.3.9600
40 error argv "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
41 error node v0.12.0
42 error npm  v2.5.1
43 error code E403
44 error you do not have permission to publish "ws". Are you logged in as the correct user? : ws
45 error If you need help, you may report this error at:
45 error     <http://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
